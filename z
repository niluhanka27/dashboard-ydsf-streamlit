import streamlit as st
import pandas as pd
import plotly.express as px

# Konfigurasi halaman agar menggunakan layout lebar
st.set_page_config(layout="wide", page_title="Dashboard YDSF Surabaya")

# --- DATA LOADING ---
DATA_FILES = {
    "Dakwah": "data/program_dakwah.csv",
    "Kemanusiaan": "data/program_kemanusiaan.csv",
    "Masjid": "data/program_masjid.csv",
    "Pendidikan": "data/program_pendidikan.csv",
    "Zakat": "data/program_zakat.csv",
    "Yatim": "data/program_yatim.csv",
}

# --- FUNGSI-FUNGSI BANTU ---

try:
    cache_decorator = st.cache_data
except AttributeError:
    cache_decorator = st.cache(allow_output_mutation=True)

@cache_decorator
def load_single_data(program_name):
    """Fungsi untuk memuat data SATU program."""
    df = pd.read_csv(DATA_FILES[program_name], sep=';', encoding='latin1')
    df['Jumlah Bantuan'] = pd.to_numeric(df['Jumlah Bantuan'], errors='coerce')
    df['Durasi Total'] = pd.to_numeric(df['Durasi Total'], errors='coerce')
    return df

@cache_decorator
def load_all_data():
    """Fungsi untuk memuat dan menggabungkan SEMUA data program."""
    list_of_dfs = []
    for program, file_path in DATA_FILES.items():
        try:
            df = pd.read_csv(file_path, sep=';', encoding='latin1')
            df['program_nama'] = program
            list_of_dfs.append(df)
        except FileNotFoundError:
            st.error(f"File tidak ditemukan: {file_path}.")
            return pd.DataFrame()
    
    if not list_of_dfs:
        return pd.DataFrame()

    combined_df = pd.concat(list_of_dfs, ignore_index=True)
    combined_df['Jumlah Bantuan'] = pd.to_numeric(combined_df['Jumlah Bantuan'], errors='coerce')
    combined_df['Durasi Total'] = pd.to_numeric(combined_df['Durasi Total'], errors='coerce')
    return combined_df

def generate_cluster_summary_df(df_cluster):
    """Membuat DataFrame ringkasan statistik untuk satu cluster."""
    if df_cluster.empty:
        return pd.DataFrame()

    median_bantuan = f"Rp {df_cluster['Jumlah Bantuan'].median():,.0f}"
    median_durasi = f"{df_cluster['Durasi Total'].median():.0f} Hari"

    kota_dist = df_cluster['Kota'].value_counts(normalize=True).nlargest(2)
    kota_summary = ", ".join([f"{idx} ({val:.1%})" for idx, val in kota_dist.items()]) if not kota_dist.empty else "N/A"

    sub_dist = df_cluster['Kat. Subprogram'].value_counts(normalize=True).nlargest(2)
    sub_summary = ", ".join([f"{idx} ({val:.1%})" for idx, val in sub_dist.items()]) if not sub_dist.empty else "N/A"

    angg_dist = df_cluster['Sumber Anggaran'].value_counts(normalize=True)
    angg_summary = ", ".join([f"{idx} ({val:.1%})" for idx, val in angg_dist.items()]) if not angg_dist.empty else "N/A"

    summary_data = {
        "Metrik": ["Median Jumlah Bantuan", "Median Durasi Total", "Kota Dominan (Top 2)", "Subprogram Dominan (Top 2)", "Sumber Anggaran Dominan"],
        "Nilai": [median_bantuan, median_durasi, kota_summary, sub_summary, angg_summary]
    }
    
    return pd.DataFrame(summary_data).set_index('Metrik')


# --- KUSTOMISASI UNTUK CLUSTERING ---
CLUSTER_INFO = {
    "Dakwah": { 
        "nama_cluster": {0: "Cluster 0: Dakwah Umum dengan Proses Lambat", 1: "Cluster 1: Dakwah Spesifik dengan Proses Cepat"}, 
        "penjelasan": "Penamaan cluster didasarkan pada variabel paling signifikan, yaitu **Durasi Total** dan **Kat. Subprogram**."
    },
    "Kemanusiaan": {
        "nama_cluster": {0: "Cluster 0: Bantuan Kemanusiaan Responsif dengan Proses Cepat", 1: "Cluster 1: Bantuan Kemanusiaan Produktif dengan Proses Lambat"},
        "penjelasan": "Penamaan cluster didasarkan pada variabel paling signifikan, yaitu **Durasi Total** dan **Kat. Subprogram**."
    },
    "Masjid": {
        "nama_cluster": {0: "Cluster 0: Bantuan Infrastruktur Umum dengan Proses Sangat Lambat", 1: "Cluster 1: Pemberdayaan Masjid & Startup dengan Proses Cepat", 2: "Cluster 2: Kemitraan Masjid Spesifik dengan Proses Cepat", 3: "Cluster 3: Bantuan Infrastruktur Lokal dengan Proses Cepat"},
        "penjelasan": "Penamaan cluster didasarkan pada variabel paling signifikan, yaitu **Durasi Total** dan **Kat. Subprogram**."
    },
    "Pendidikan": { 
        "nama_cluster": {0: "Cluster 0: Bantuan Sarana & Personel dengan Proses Sangat Lambat", 1: "Cluster 1: Bantuan Sarana & Guru Spesifik dengan Proses Kilat", 2: "Cluster 2: Bantuan Pendidikan Umum dengan Proses Cepat", 3: "Cluster 3: Bantuan Insentif Guru dengan Proses Bertahap"}, 
        "penjelasan": "Penamaan cluster didasarkan pada variabel paling signifikan, yaitu **Durasi Total** dan **Kat. Subprogram**."
    },
    "Zakat": {
        "nama_cluster": {0: "Cluster 0: Zakat Kebutuhan Primer dengan Proses Cepat", 1: "Cluster 1: Zakat Kebutuhan Primer dengan Proses Bertahap", 2: "Cluster 2: Zakat Kebutuhan & Relawan dengan Proses Cepat"},
        "penjelasan": "Penamaan cluster didasarkan pada variabel paling signifikan, yaitu **Durasi Total** dan **Kat. Subprogram**."
    },
    "Yatim": {
        "nama_cluster": {0: "Cluster 0: Beasiswa Panti Asuhan dengan Penyaluran Kilat", 1: "Cluster 1: Beasiswa Non-Panti dengan Proses Lambat", 2: "Cluster 2: Beasiswa SD Non-Panti dengan Penyaluran Cepat"},
        "penjelasan": "Penamaan cluster didasarkan pada variabel paling signifikan, yaitu **Durasi Total** dan **Kat. Subprogram**."
    }
}

# --- SIDEBAR (NAVIGASI UTAMA) ---
col1, col2 = st.sidebar.columns(2)
with col1:
    st.image("assets/logo_kampus.png", width=60)
with col2:
    st.image("assets/logo_stakeholder.png", width=60)

st.sidebar.title("Navigasi & Filter")
selected_page = st.sidebar.radio("Pilih Halaman:", options=["Halaman Utama", "Data Penerima Bantuan", "Analisis Eksploratif (EDA)", "Profiling Cluster"])

selected_program = None
if selected_page != "Halaman Utama":
    selected_program = st.sidebar.selectbox("Pilih Program untuk Detail:", options=list(DATA_FILES.keys()))
    
st.sidebar.markdown("---")
st.sidebar.markdown("<p style='font-size:11px; color:grey;'>Dibuat oleh:<br><b>Ni Luh Ayu - Mahasiswa Sains Data Terapan - PENS</b></p>", unsafe_allow_html=True)


# ==================================================================
#                     HALAMAN UTAMA (WELCOME PAGE)
# ==================================================================
if selected_page == "Halaman Utama":
    st.title("Dashboard Penerima Bantuan Lembaga Yayasan Dana Sosial Al-Falah (YDSF) Surabaya")
    st.markdown("---")
    st.header("Selamat Datang di Dashboard YDSF")
    st.write("Halaman ini menyajikan gambaran umum dari seluruh program bantuan YDSF dari tahun 2018 hingga Agustus 2025.")
    
    df_all = load_all_data()

    if not df_all.empty:
        st.subheader("Ringkasan Kinerja Lintas Program")
        col1, col2 = st.columns(2)
        with col1:
            st.info("**Total Bantuan yang Disalurkan per Program**")
            total_per_program = df_all.groupby('program_nama')['Jumlah Bantuan'].sum().sort_values(ascending=False)
            fig1 = px.bar(total_per_program, y='Jumlah Bantuan', text_auto='.2s', labels={'program_nama':'Program', 'y':'Total Bantuan (Rp)'})
            st.plotly_chart(fig1, use_container_width=True)
            st.markdown("""
            <div style='text-align: justify; font-size: 14px;'>
            <b>Analisis:</b> Grafik ini menunjukkan program mana yang menjadi fokus utama alokasi dana YDSF.<br>
            <b>Insight:</b> Program Zakat dan Pendidikan menyerap dana terbesar, menandakan ini adalah pilar utama lembaga. Program Masjid, meskipun jumlah transaksinya lebih sedikit, memiliki alokasi yang signifikan, menyoroti tingginya biaya per proyek infrastruktur.
            </div>""", unsafe_allow_html=True)
            
        with col2:
            st.info("**Efisiensi Proses Antar Program**")
            durasi_per_program = df_all.groupby('program_nama')['Durasi Total'].mean().sort_values(ascending=False)
            fig3 = px.bar(durasi_per_program, y='Durasi Total', text_auto='.0f', labels={'program_nama':'Program', 'y':'Rata-rata Durasi (Hari)'})
            st.plotly_chart(fig3, use_container_width=True)
            st.markdown("""
            <div style='text-align: justify; font-size: 14px;'>
            <b>Analisis:</b> Membandingkan rata-rata durasi penyaluran bantuan untuk setiap program.<br>
            <b>Insight:</b> Program Kemanusiaan dan Zakat memiliki proses tercepat, menunjukkan prioritas pada bantuan darurat. Durasi terlama pada Program Masjid dan Pendidikan adalah wajar, menandakan adanya proses verifikasi dan survei yang mendalam.
            </div>""", unsafe_allow_html=True)

        st.markdown("---")
        st.subheader("Analisis Pertumbuhan Tahunan")
        st.info("**Tren Pertumbuhan Penyaluran Bantuan per Program**")
        tren_tahunan_program = df_all.groupby(['Tahun', 'program_nama'])['Jumlah Bantuan'].sum().reset_index()
        fig2 = px.line(tren_tahunan_program, x='Tahun', y='Jumlah Bantuan', color='program_nama', markers=True, labels={'Tahun':'Tahun', 'Jumlah Bantuan':'Total Bantuan (Rp)', 'program_nama':'Program'})
        st.plotly_chart(fig2, use_container_width=True)
        st.markdown("""
        <div style='text-align: justify; font-size: 14px;'>
        <b>Analisis:</b> Membandingkan pertumbuhan dana setiap program dari tahun ke tahun.<br>
        <b>Insight:</b> Secara agregat, penyaluran dana YDSF menunjukkan tren positif. Terlihat adanya lonjakan signifikan pada Program Kemanusiaan di tahun tertentu yang mungkin berkorelasi dengan kejadian bencana. Sementara itu, Program Pendidikan menunjukkan pertumbuhan yang paling stabil, menandakan adanya komitmen jangka panjang yang konsisten.
        </div>""", unsafe_allow_html=True)


# ==================================================================
#            HALAMAN LAIN (Tergantung pada Pilihan Program)
# ==================================================================
elif selected_program:
    st.header(f"{selected_page} - Program {selected_program}")
    
    df_single = load_single_data(selected_program)
    
    # --- BAGIAN UNTUK HALAMAN DATA PENERIMA BANTUAN ---
    if selected_page == "Data Penerima Bantuan":
        st.info("Gunakan filter di bawah untuk menyeleksi data.")
        all_years = sorted(df_single['Tahun'].dropna().unique().astype(int))
        selected_years = st.multiselect("Filter berdasarkan Tahun:", options=all_years, default=all_years)
        
        search_query = st.text_input("Pencarian", placeholder="Masukkan nama atau NIK/No.KK")

        df_filtered_data = df_single[df_single['Tahun'].isin(selected_years)]
        if search_query:
            df_filtered_data = df_filtered_data[
                df_filtered_data['Nama Penerima'].str.contains(search_query, case=False, na=False) |
                df_filtered_data['KTP/SIM'].astype(str).str.contains(search_query, case=False, na=False)
            ]
        
        st.dataframe(df_filtered_data.drop(columns=['Cluster'], errors='ignore'))

    # --- BAGIAN UNTUK HALAMAN ANALISIS EKSPLORATIF (EDA) ---
    elif selected_page == "Analisis Eksploratif (EDA)":
        st.subheader("Filter Data")
        list_tahun = ["Semua Tahun"] + sorted(df_single['Tahun'].dropna().unique().astype(int), reverse=True)
        tahun_terpilih = st.selectbox("Pilih Tahun Analisis:", options=list_tahun)

        df_filtered_eda = df_single if tahun_terpilih == "Semua Tahun" else df_single[df_single['Tahun'] == tahun_terpilih]

        st.markdown("---")
        st.subheader(f"Ringkasan Umum Program - Periode {tahun_terpilih}")
        c1, c2, c3 = st.columns(3)
        c1.metric("Jumlah Nominal Bantuan yang Disalurkan", f"Rp {df_filtered_eda['Jumlah Bantuan'].sum():,.0f}")
        c2.metric("Jumlah Proses Penyaluran Bantuan", f"{df_filtered_eda.shape[0]} Kali")
        avg_durasi_val = df_filtered_eda['Durasi Total'].mean() if not df_filtered_eda.empty else 0
        c3.metric("Rata-rata Durasi", f"{avg_durasi_val:.0f} Hari")
        
        st.markdown("---")
        st.subheader("Visualisasi Detail Analisis")
        
        vcol1, vcol2 = st.columns(2)
        with vcol1:
            st.info("**Top 10 Kategori Subprogram**")
            top_sub = df_filtered_eda['Kat. Subprogram'].value_counts().nlargest(10)
            fig_v2 = px.bar(top_sub, y=top_sub.index, x=top_sub.values, orientation='h', text_auto=True, labels={'y':'Subprogram', 'x':'Jumlah Transaksi'})
            fig_v2.update_layout(yaxis={'categoryorder':'total ascending'})
            st.plotly_chart(fig_v2, use_container_width=True)
            st.markdown("""
            <div style='text-align: justify; font-size: 14px;'>
            <b>Analisis:</b> Mengurutkan aktivitas yang paling sering didanai dalam program ini.<br>
            <b>Insight:</b> Untuk Program Pendidikan, subprogram 'Insentif Guru' menjadi yang paling sering dijalankan, menunjukkan fokus utama pada dukungan langsung kepada tenaga pendidik.
            </div>""", unsafe_allow_html=True)

            st.info("**Distribusi Jumlah Bantuan**")
            fig_v6 = px.histogram(df_filtered_eda, x='Jumlah Bantuan', nbins=30, marginal="box", labels={'Jumlah Bantuan':'Jumlah Bantuan (Rp)'})
            st.plotly_chart(fig_v6, use_container_width=True)
            st.markdown("""
            <div style='text-align: justify; font-size: 14px;'>
            <b>Analisis:</b> Menunjukkan sebaran dan nominal bantuan yang paling umum diberikan.<br>
            <b>Insight:</b> Sebagian besar bantuan berada di bawah Rp 2 Juta. Box plot menunjukkan adanya beberapa bantuan bernilai sangat tinggi (outlier) yang bisa diinvestigasi lebih lanjut kasusnya.
            </div>""", unsafe_allow_html=True)

        with vcol2:
            st.info("**Top 10 Kota Penerima Bantuan**")
            top_kota = df_filtered_eda['Kota'].value_counts().nlargest(10)
            fig_v5 = px.bar(top_kota, y=top_kota.index, x=top_kota.values, orientation='h', text_auto=True, labels={'y':'Kota', 'x':'Jumlah Transaksi'})
            fig_v5.update_layout(yaxis={'categoryorder':'total ascending'})
            st.plotly_chart(fig_v5, use_container_width=True)
            st.markdown("""
            <div style='text-align: justify; font-size: 14px;'>
            <b>Analisis:</b> Mengidentifikasi wilayah geografis dengan konsentrasi bantuan tertinggi.<br>
            <b>Insight:</b> Selain Surabaya, Kab. Gresik dan Sidoarjo secara konsisten menjadi penerima terbanyak. Ini menandakan adanya jaringan atau kemitraan yang kuat dan aktif di wilayah-wilayah penyangga tersebut.
            </div>""", unsafe_allow_html=True)
            
            st.info("**Komposisi Sumber Anggaran**")
            sumber_anggaran = df_filtered_eda['Sumber Anggaran'].value_counts()
            fig_pie = px.pie(sumber_anggaran, names=sumber_anggaran.index, values=sumber_anggaran.values, hole=0.4, title="Proporsi Sumber Anggaran")
            st.plotly_chart(fig_pie, use_container_width=True)
            st.markdown("""
            <div style='text-align: justify; font-size: 14px;'>
            <b>Analisis:</b> Menunjukkan proporsi sumber dana yang digunakan untuk program ini.<br>
            <b>Insight:</b> Mayoritas dana bersumber dari Infak, menunjukkan fleksibilitas alokasi. Dana Zakat yang lebih kecil mungkin dialokasikan untuk subprogram spesifik yang sesuai kriteria mustahik.
            </div>""", unsafe_allow_html=True)

    # --- BAGIAN UNTUK HALAMAN PROFILING CLUSTER ---
    elif selected_page == "Profiling Cluster":
        info = CLUSTER_INFO.get(selected_program, {})
        if not info or not info.get("nama_cluster"):
            st.warning(f"Informasi cluster untuk '{selected_program}' belum diatur.")
        else:
            nama_cluster_options = list(info["nama_cluster"].values())
            if not nama_cluster_options:
                st.warning("Tidak ada nama cluster yang terdefinisi untuk program ini.")
            else:
                selected_cluster_nama = st.selectbox("Pilih Cluster untuk Melihat Profil Detail:", options=nama_cluster_options)

                if selected_cluster_nama:
                    st.subheader(selected_cluster_nama)
                    st.info(info.get("penjelasan", "Tidak ada penjelasan mengenai dasar penamaan cluster."))
                    st.markdown("---")
                    
                    list_tahun_cluster = ["Semua Tahun"] + sorted(df_single['Tahun'].dropna().unique().astype(int), reverse=True)
                    tahun_terpilih_cluster = st.selectbox("Pilih Tahun Analisis:", options=list_tahun_cluster, key="filter_tahun_cluster")
                    
                    selected_cluster_key = [k for k, v in info["nama_cluster"].items() if v == selected_cluster_nama][0]
                    df_cluster_all_years = df_single[df_single['Cluster'] == selected_cluster_key].copy()
                    
                    df_cluster = df_cluster_all_years if tahun_terpilih_cluster == "Semua Tahun" else df_cluster_all_years[df_cluster_all_years['Tahun'] == tahun_terpilih_cluster]

                    if df_cluster.empty:
                        st.warning(f"Tidak ada data untuk cluster ini pada tahun {tahun_terpilih_cluster}.")
                    else:
                        st.markdown("#### Ringkasan Statistik Cluster")
                        summary_df = generate_cluster_summary_df(df_cluster)
                        st.table(summary_df)
                        
                        st.markdown("---")
                        st.subheader("Perbandingan Visual Antar Cluster")
                        
                        pccol1, pccol2 = st.columns(2)
                        with pccol1:
                            st.info("**Perbandingan Durasi Proses**")
                            fig_box_durasi = px.box(df_cluster_all_years, x='Cluster', y='Durasi Total', color='Cluster', 
                                                    labels={'Cluster':'Nomor Cluster'}, points="all")
                            st.plotly_chart(fig_box_durasi, use_container_width=True)
                            st.markdown("""
                            <div style='text-align: justify; font-size: 14px;'>
                            <b>Analisis:</b> Membandingkan sebaran durasi antar cluster.<br>
                            <b>Insight:</b> Grafik ini secara visual membuktikan perbedaan kecepatan proses. Cluster yang dinamai 'Cepat' memiliki sebaran durasi yang konsisten di dekat nol, sementara cluster 'Lambat' menunjukkan sebaran yang jauh lebih panjang dan bervariasi.
                            </div>""", unsafe_allow_html=True)
                        with pccol2:
                            st.info("**Perbandingan Jumlah Bantuan**")
                            fig_box_bantuan = px.box(df_cluster_all_years, x='Cluster', y='Jumlah Bantuan', color='Cluster', 
                                                     labels={'Cluster':'Nomor Cluster'})
                            st.plotly_chart(fig_box_bantuan, use_container_width=True)
                            st.markdown("""
                            <div style='text-align: justify; font-size: 14px;'>
                            <b>Analisis:</b> Membandingkan sebaran nominal bantuan antar cluster.<br>
                            <b>Insight:</b> Dari sini terlihat apakah ada cluster yang secara konsisten menerima bantuan lebih besar atau lebih kecil, yang mengvalidasi karakteristik dari setiap segmen.
                            </div>""", unsafe_allow_html=True)
                        
                        st.info("**Peta Persebaran Cluster**")
                        fig_scatter = px.scatter(df_cluster_all_years, x='Durasi Total', y='Jumlah Bantuan', color='Cluster',
                                                 hover_name='Kat. Subprogram', size='Jumlah Bantuan', size_max=40,
                                                 labels={'Cluster':'Nomor Cluster'})
                        st.plotly_chart(fig_scatter, use_container_width=True)
                        st.markdown("""
                        <div style='text-align: justify; font-size: 14px;'>
                        <b>Analisis:</b> Memetakan setiap penerima berdasarkan durasi dan jumlah bantuan.<br>
                        <b>Insight:</b> Peta ini menunjukkan keberhasilan algoritma dalam memisahkan data menjadi kelompok-kelompok yang berbeda. Gumpalan data yang jelas untuk masing-masing warna (cluster) mengkonfirmasi bahwa segmen yang terbentuk memang memiliki karakteristik yang berbeda secara nyata.
                        </div>""", unsafe_allow_html=True)
                        
                        st.markdown("---")
                        st.subheader("Daftar Rinci Penerima Bantuan di Cluster Ini")
                        st.write(f"Menampilkan data untuk **{selected_cluster_nama}** pada periode **{tahun_terpilih_cluster}**.")
                        
                        search_query_cluster = st.text_input("Cari di dalam cluster:", placeholder="Masukkan nama atau NIK/No.KK", key="search_cluster")
                        
                        df_table_cluster = df_cluster
                        if search_query_cluster:
                            df_table_cluster = df_cluster[
                                df_cluster['Nama Penerima'].str.contains(search_query_cluster, case=False, na=False) |
                                df_cluster['KTP/SIM'].astype(str).str.contains(search_query_cluster, case=False, na=False)
                            ]
                        st.dataframe(df_table_cluster)
else:
    st.info("👈 Silakan pilih program di sidebar untuk melihat detailnya.")